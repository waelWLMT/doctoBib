// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240615141235_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("RueBoulevard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VilleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartementId");

                    b.HasIndex("VilleId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Core.Models.Calendrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dimanche")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("HeureDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeureFin")
                        .HasColumnType("time");

                    b.Property<bool>("Jeudi")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<bool>("Lundi")
                        .HasColumnType("bit");

                    b.Property<bool>("Mardi")
                        .HasColumnType("bit");

                    b.Property<bool>("Mercredi")
                        .HasColumnType("bit");

                    b.Property<int>("PraticienId")
                        .HasColumnType("int");

                    b.Property<bool>("Samedi")
                        .HasColumnType("bit");

                    b.Property<bool>("Vendredi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PraticienId");

                    b.ToTable("Calendriers");
                });

            modelBuilder.Entity("Core.Models.Departement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeDepartement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("NomDeparetement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("Core.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Core.Models.Motif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialiteId");

                    b.ToTable("Motifs");
                });

            modelBuilder.Entity("Core.Models.RendezVous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Heure")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<int>("MotifId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId1")
                        .HasColumnType("int");

                    b.Property<int>("PraticienId")
                        .HasColumnType("int");

                    b.Property<int?>("PraticienId1")
                        .HasColumnType("int");

                    b.Property<string>("Recaputulatif")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MotifId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientId1");

                    b.HasIndex("PraticienId");

                    b.HasIndex("PraticienId1");

                    b.ToTable("Appointements");
                });

            modelBuilder.Entity("Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Models.Specialite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialites");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("CryptedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Models.Ville", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Borough")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<string>("NomVille")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartementId");

                    b.ToTable("Villes");
                });

            modelBuilder.Entity("MenuRole", b =>
                {
                    b.Property<int>("MenusId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("MenusId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("MenuRole");
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Core.Models.Praticien", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<int>("SpecialiteId")
                        .HasColumnType("int");

                    b.HasIndex("SpecialiteId");

                    b.HasDiscriminator().HasValue("Praticien");
                });

            modelBuilder.Entity("Core.Models.Adresse", b =>
                {
                    b.HasOne("Core.Models.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departement");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Core.Models.Calendrier", b =>
                {
                    b.HasOne("Core.Models.Praticien", "Praticien")
                        .WithMany()
                        .HasForeignKey("PraticienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Praticien");
                });

            modelBuilder.Entity("Core.Models.Menu", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany("Menus")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Models.Motif", b =>
                {
                    b.HasOne("Core.Models.Specialite", null)
                        .WithMany("Motifs")
                        .HasForeignKey("SpecialiteId");
                });

            modelBuilder.Entity("Core.Models.RendezVous", b =>
                {
                    b.HasOne("Core.Models.Motif", "Motif")
                        .WithMany()
                        .HasForeignKey("MotifId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Patient", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId1");

                    b.HasOne("Core.Models.Praticien", "Praticien")
                        .WithMany()
                        .HasForeignKey("PraticienId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Praticien", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PraticienId1");

                    b.Navigation("Motif");

                    b.Navigation("Patient");

                    b.Navigation("Praticien");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.HasOne("Core.Models.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Core.Models.Ville", b =>
                {
                    b.HasOne("Core.Models.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("MenuRole", b =>
                {
                    b.HasOne("Core.Models.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Praticien", b =>
                {
                    b.HasOne("Core.Models.Specialite", "Specialite")
                        .WithMany("Praticiens")
                        .HasForeignKey("SpecialiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialite");
                });

            modelBuilder.Entity("Core.Models.Specialite", b =>
                {
                    b.Navigation("Motifs");

                    b.Navigation("Praticiens");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Core.Models.Praticien", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
